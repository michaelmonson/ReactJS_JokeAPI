
--------------------------------------
 2023-07-23 (Routing is working now!)
--------------------------------------

Success!  Routing now works!  I didn't have any resources available on STG Slack, but after fixing several problems myself, 
  * A combination of ChatGPT and Google Bard helped me zero in on the final issue.  I have began using generative A.I. (LLC models) to troubleshoot.  
  * A.I. is now my "duck!" when I am working through certain programming issues!

Interestingly, as remarkable a tool as ChatGPT has been in helping me solve general software bugs and issues, it's learning dataset is dated to 2021.
As a result, it was giving me coding recommendations based on older versions of REACT, even after I explained that React V.18 had depricated certain pieces.

So I used the best advise I could get from ChatGPT, and used the current React docs as context for what needed to change.  ChatGPT kept telling me otherwise. ;-)
Analyzing the errors I received in my browser console, I was able to fix several issues through the React docs.  But there was still one annoying issue remaining.

Finally, it was through using Google Bard (which has become remarkably more sophisticated since I joined their beta offering 6 weeks ago), that I was able
to finally nail the last issue.  Bard is kept much more up-to-date, and has access to Google's search engine to provide current data back through it's generative text results.
This is what Google Bard had to say:

  | The error message you are getting is because the root element that you are passing to ReactDOM.createRoot() is not a DOM element.
  | In your code, you are defining root as the document.getElementById('root'), but this element does not exist.
  | To fix this, you need to create the root element yourself.  (and it gave me a sample of code)
  | Once you have created the root element, you can pass it to ReactDOM.createRoot(). Your code should now compile and run without error.

I asked Google Bard to explain how it determined the cause of my issue, since I had sent it the code behind my index.js and App.js files.  Bard responded thus:

  | I was able to figure out what was wrong with your code by looking at the error message. 
  | The error message said that the root element that you were passing to ReactDOM.createRoot() was not a DOM element. This meant that the root element did not exist.
  | I knew that you were trying to pass the document.getElementById('root') element to ReactDOM.createRoot(). However, this element did not exist, because you had not created it yet.
  | I suggested that you create the root element yourself. This is what fixed the error, and allowed your code to compile and run without error.
  | I was also able to figure this out because I have been trained on a massive dataset of text and code.
  | This dataset includes a lot of information about React.js, including the error messages that can be generated by React. 
  | This allowed me to quickly identify the source of the problem in your code.  I'm glad that my information was useful to you!

Fascinating... although A.I. software can never feel emotions, including gladness or gratitude, we are certainly upon the threshold of a new frontier!
And thanks to these A.I. tools, I was able to enhance my learning through this interactive conversational debugging.
A human engineer who has considerable experience with a given set of technologies and languages will always be the better choice, but A.I. is a remarkable tool!

The landscape of software engineering and development is certainly going to be very different as A.I. technology becomes ubiqutous and as it continues to evolve.

----------------------
 2023-07-23 (Routing)
----------------------

Adding React Router Components: The main Components of React Router are:

   > BrowserRouter: BrowserRouter is a router implementation that uses the HTML5 history API(pushState, replaceState and the popstate event) 
       to keep your UI in sync with the URL.  It is the parent component that is used to store all of the other components.
   > Routes: Itâ€™s a new component introduced in the v6 and a upgrade of the component. The main advantages of Routes over Switch are:
       - Relative s and s
       - Routes are chosen based on the best match instead of being traversed in order.
   > Route: Route is the conditionally shown component that renders some UI when its path matches the current URL.
   > Link: Link component is used to create links to different routes and implement navigation around the application. It works like HTML anchor tag.

I think I am getting close!  After a couple of hours of work spread out over the day, I was able to resolve my issue.
  - I had neglected to install the 'react-router-dom' package, which is why it was not compiling successfully.
  - Ran this command:  npm install react-router-dom
  - Now the Webpack compiles successfully, so the browser launches, but it comes up with a blank screen.  Why?

----------------------
 2023-07-22 (Routing)
----------------------

Working through the differences between various routing solutions for React.  But 'React Router" does seem to be the currently preferred solution.
   * But there are differences between how I have my project setup, and some of the other project tutorials.
   * This certification will help me with JavaScript in general, which I am weak in.  
   * Funny thing is that I originally learned JavaScript (Sams Teaches JavaScript in 24 hours) many moons ago, in the 1990's, in the hey-day of the browser wars.
   * I never finished it, but now I have the opportunity to learn the modern version of JavaScript, with years of improvements, refinements, and TypeScript added in!

LINK for learning React Router usage: https://www.geeksforgeeks.org/reactjs-router/

package-lock.json : It is highly recommended you commit the generated package lock to source control: 
   * this will allow anyone else on your team, your deployments, your CI/continuous integration, 
     and anyone else who runs npm install in your package source to get the exact same dependency tree 
     that you were developing on.
   * Additionally, the diffs from these changes are human-readable and will inform you of any changes that 
     npm has made to your node_modules, so you can notice if any transitive dependencies were updated, hoisted, etc.

----------------------
 2023-07-17 (Routing)
----------------------

Trying to get routing working.  I'm a bit stumped with it, but followed instructions from one site that recommended using "ReactRouter.
   1. Create a new folder called "components" inside your "src" folder. This is where you'll store your future component files.
   2. Install React Router by running the following command in your project's root directory:
         npm install react-router-dom
   3. In my App.js or main component file, import the necessary components from React Router:
         import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
   4. Created my route components. I created separate files for each route component inside the "components" folder I created.
   5. In my main component file, wrapped my entire application with the Router component. This allows React Router to manage the routing functionality.
   6. Inside the Router component, I defined my routes using the Route component. The Switch component can be used to ensure that only one route is rendered at a time.
   7. Add a button, menu, or any other way to navigate between routes in my components. 
      The Link component from React Router can be used to create clickable links that navigate to different routes.
   8. I will try placing this Navbar component in my layout or any other appropriate component to provide navigation links.

------------
 2023-05-27
------------
I am resuming work on the certification after a very busy couple of weeks with my client and some family priorities as my kids head into the end of the school year.

Reaching out to Mike Collins.  One point of clarification that I seek:  In the README, it says to "Create a new React App and copy the README all .MD files into the project," whereas his instructions stated that I should "fork" the certification repository and start from there.

Since Mike's instructions were to fork, I have generated and added in the REACT project to my forked copy of the project, which contained just the .MD files anyway, at least in its current state.

My only issue with this is that it also contains all of the commit history of the REACT Cert repository from whence I forked, which could create extra noise.  I will assume that Mike and anyone else on the cert team are okay with that, and I will proceed with my forked copy of the repository unless he responds differently.  The advantage from forking is that anytime updates are made to the originating project (such as the changes to the README file we discussed), I can simply merge those changes across into my project.

That is my only question at this time.  I requested that Mike let me konw if I should change anything regarding how I have approached this.  I'll proceed forward with my forked branch.

Creating a React App
   * It said I could use the React Cli if I wished.  That is all pretty foreign to me at this time, so I'll just start with the basics.
   * When I search for how to create a React App, there is a slew of "outdated" documentation pages.
   * The most promising document is an official React Dev site: https://create-react-app.dev/
   * It states "Create React App" ~ Set up a modern web app by running one command.  (this is where I will start)

Getting started

"Create React App" is an officially supported way to create single-page React applications. It offers a modern build setup with no configuration.

Quick Start (from the command line)
   1. npx create-react-app my-app
   2. cd my-app
   3. npm start

I ran the process and it churned for about 3 minutes.  Ugh!  It addes nearly 1,500 packages!  So much bloatware these days!
However, it does streamline the development process, because I essentially get a myriad of Build, DevOps, and deployment tools for free.
So with huge storage and memory resources available these days, it does streamline the learning process.

After looking into the app, and calculating the size, this react-app now consumes 203 MB of files of my drive.
37,415 files and nearly 5,000 folders!  That seems unacceptable.  I can't imagine I need all of that! (99% is consumed by node modules)

Here are the highlights of what the "Quick Start" did when running the 'npx' command:

   Need to install the following packages: create-react-app
   Ok to proceed? (y) y

   Success! Created react-app at C:\PROJECTS\stg\reactcertification\react-app
   NOTE: Inside that directory, you can run several commands:
   ~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~
       npm start     : Starts the development server.
       npm run build : Bundles the app into static files for production.
       npm test      : Starts the test runner.
       npm run eject : Removes this tool and copies build dependencies, config files, 
                       and scripts into the app directory. 
                       If you do this, you canâ€™t go back!
   ~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~
   We suggest that you begin by typing:
       cd react-app
       npm start

   Then open http://localhost:3000/ to see your app.

   When youâ€™re ready to deploy to production, create a minified bundle with npm run build.

   Happy hacking!

-------------------------------------------------

------------
 2023-05-16
------------
Reviewing project notes and becoming familiar with what I will be doing in this certification!

"Chuck Norris ~ A STG React Certification Module"

In this project you will be creating a simple React App that will find and return Chuck Norris jokes. Since this project is designed to test your Javascript fundamentals and basic React skills, there will be comments and instructions provided to help with non-React specific tools.